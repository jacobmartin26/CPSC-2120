/*
 * Name: Jacob Martin (jmart52)
 * Date Submitted: 2/9/2022
 * Lab Section: CPSC 2121-001
 * Assignment Name: Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <iostream>
#include <algorithm>

using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols

/*
 *This helper function is called in the infixToPostfix function in order
 *to set a precedence for the varyious operators used in the program.
 *Higher precedence values will have a higher return values and anything that
 *is not an operator is given a value of -1
*/
int OperatorPrec(string prec)
{
    if (prec == "*" || prec == "/" || prec == "%")
    {
        return 2;
    }
    else if (prec == "+" || prec == "-")
    {
        return 1;
    }
    else
    {
        return -1;
    }
}
int infixToPostfix(string infix[], int length1, string postfix[])
{
    stack<string> myStack; //stack
    int newLen = 0; // keeps track of the new length
    int x = 0; // iterator for postfix array
    int case19 = 0; // tailored for case 19
    int lPar = 0; // left parenthesis
    int rPar = 0; // right parenthesis
    
    for (int j = 0; j < length1; j++) // loop to check certain things for parentheses
    {
        if (infix[j] == "(")
        {
            lPar++; // adds to variable if the is a "("
            case19 = case19 + 1; // similar to lPar
        }
        if (infix[j] == ")")
        {
            rPar++; // same as lPar stuff but for ")" now
            case19 = case19 - 1; // subtracts if there is a ")"
        }
        if (case19 == -1) // if there is not an accompanying parenthesis, returns 0
        {
            return 0;
        }
    }
    
    if (lPar != rPar) // similar to above if, but wouldn't work specifically for 19 :/
    {
        newLen = 0;
        return newLen;
    }
    
    for (int i = 0; i < length1; i++) // loop used for everything else
    {
        string temp; // temp variable to hold value of infix[i]
        temp = infix[i];
        
        if (temp >= "0" && temp <= "9") // if there's an operand, adds it to array
        {
            postfix[x] = temp;
            x++; // all x++'s iterate postfix when a change is made to the array
            newLen++; // all newLen++'s increase when change made to postfix
        }

        else if (temp == "(")
        {
            myStack.push(infix[i]); // pushes to stack
        }
        else if (temp == ")")
        {
            while (myStack.top() != "(")
            {
                postfix[x] = myStack.top(); // adds the stuff between parentheses to array
                myStack.pop();
                x++;
                newLen++;
            }
            myStack.pop(); // the pops pop the parentheses
        }
        else
        {
            while (!myStack.empty() && OperatorPrec(temp) <= OperatorPrec(myStack.top()))
            {
                postfix[x] = myStack.top(); // adds operators to array
                myStack.pop();
                x++;
                newLen++;
            }
            myStack.push(temp);
        }
    }
    while (!myStack.empty()) // adds any remaining things from stack to the array
    {
        postfix[x] = myStack.top();
        x++;
        newLen++;
        myStack.pop();
    }
    return newLen; // returns the length
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = { "2", "+", "3", "*", "4", "+", "5",
                         "-", "6", "+", "7", "*", "8", "+",
                         "9" };
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i = 0; i < 15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i = 0; i < postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;

    return 0;
}